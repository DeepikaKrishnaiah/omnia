#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Tasks for k8s_start_manager role
  when: hostvars['127.0.0.1']['k8s_support']
  block:
    - name: Disable SWAP (1/2)
      ansible.builtin.command: /usr/sbin/swapoff -a
      changed_when: true
      tags: init

    - name: Disable SWAP in fstab (2/2)
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+.*)$'
        replace: '# \1'

    - name: Get netaddr
      ansible.builtin.setup:
        filter: ansible_default_ipv4.address

    - name: Get K8s nodes status
      ansible.builtin.command: kubectl get nodes
      changed_when: false
      failed_when: false
      register: k8s_nodes
      tags: init

    - name: Get K8s ready compute nodes
      ansible.builtin.shell: >
        set -o pipefail && \
        kubectl get node --selector='!node-role.kubernetes.io/master' | grep -v 'NotReady'
      changed_when: false
      failed_when: false
      register: k8s_nodes_ready
      tags: init

    - name: Get K8s not ready compute nodes
      ansible.builtin.shell: >
        set -o pipefail && \
        kubectl get node --selector='!node-role.kubernetes.io/master' | grep 'NotReady'
      changed_when: false
      failed_when: false
      register: k8s_nodes_not_ready
      tags: init

    - name: Docker login
      ansible.builtin.command: docker login -u {{ hostvars['127.0.0.1']['docker_username'] }} -p {{ hostvars['127.0.0.1']['docker_password'] }}
      changed_when: true
      register: docker_login_output
      failed_when: false
      when: hostvars['127.0.0.1']['docker_username'] or hostvars['127.0.0.1']['docker_password']
      no_log: true

    - name: Docker login check
      ansible.builtin.fail:
        msg: "{{ docker_login_fail_msg }}"
      when: docker_login_output is failed
    
    - name: Generate default containerd configuration
      ansible.builtin.shell:
        cmd: containerd config default > /etc/containerd/config.toml && systemctl restart containerd
      become: yes    

    - name: Initialize kubeadm (This process may take 5-10min)
      block:
        - name: Initialize kubeadm (This process may take 5-10min)
          ansible.builtin.command: "kubeadm init --pod-network-cidr='{{ hostvars['127.0.0.1']['k8s_pod_network_cidr'] }}' \
            --apiserver-advertise-address='{{ ansible_default_ipv4.address }}'"
          changed_when: true
          register: init_output
          tags: init
      rescue:
        - name: Reset kubeadm
          ansible.builtin.command: "kubeadm reset -f"
          changed_when: true

        - name: Initialize kubeadm (This process may take 5-10min)
          ansible.builtin.command: "kubeadm init --pod-network-cidr='{{ hostvars['127.0.0.1']['k8s_pod_network_cidr'] }}' \
            --apiserver-advertise-address='{{ ansible_default_ipv4.address }}'"
          changed_when: true
          register: init_output
          tags: init
      when: "'control-plane' not in k8s_nodes.stdout"

    - name: Setup directory for Kubernetes environment for root
      ansible.builtin.file:
        path: "{{ k8s_root_directory }}"
        state: directory
        mode: "{{ k8s_root_directory_mode }}"
      tags: init

    - name: Copy Kubernetes config for root
      ansible.builtin.copy:
        src: "{{ k8s_config_src }}"
        dest: "{{ k8s_config_dest }}"
        owner: root
        group: root
        mode: "{{ k8s_config_file_mode }}"
        remote_src: yes
      tags: init

    - name: Update the kubernetes config file permissions
      ansible.builtin.shell: "chown $(id -u):$(id -g) '{{ k8s_config_dest }}'"
      args:
        warn: false
      changed_when: true
      tags: init

    - name: Cluster token
      ansible.builtin.shell: >
        set -o pipefail && \
        kubeadm token list | cut -d ' ' -f1 | sed -n '2p'
      changed_when: false
      register: k8s_token
      tags: init

    - name: Set k8s_manager_token
      ansible.builtin.set_fact:
        k8s_manager_token: "{{ k8s_token.stdout }}"
      when: k8s_token.stdout | length > 1

    - name: Create cluster token if empty
      ansible.builtin.shell: >
        set -o pipefail && \
        kubeadm token create
      changed_when: true
      register: create_k8s_token
      when: k8s_token.stdout | length < 1

    - name: Retry fetching cluster token
      ansible.builtin.shell: >
        set -o pipefail && \
        kubeadm token list | cut -d ' ' -f1 | sed -n '2p'
      changed_when: false
      register: retry_k8s_token
      when: k8s_token.stdout | length < 1

    - name: Set k8s_manager_token
      ansible.builtin.set_fact:
        k8s_manager_token: "{{ retry_k8s_token.stdout }}"
      when: k8s_token.stdout | length < 1

    - name: CA Hash
      ansible.builtin.shell: >
        set -o pipefail && \
        openssl x509 -pubkey -in {{ k8s_cert_path }} | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      changed_when: false
      register: k8s_manager_ca_hash
      tags: init

    - name: Add K8S Manager IP, Token, and Hash to dummy host
      ansible.builtin.add_host:
        name:   "K8S_TOKEN_HOLDER"
        token:  "{{ k8s_manager_token }}"
        hash:   "{{ k8s_manager_ca_hash.stdout }}"
        ip:     "{{ ansible_default_ipv4.address }}"
        k8s_nodes:  "{{ k8s_nodes.stdout }}"
        k8s_nodes_ready:  "{{ k8s_nodes_ready.stdout }}"
        k8s_nodes_not_ready: "{{ k8s_nodes_not_ready.stdout }}"
      tags: init

    - name: Print k8s token
      ansible.builtin.debug:
        msg: "[Manager] K8S_TOKEN_HOLDER K8S token is {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"
        verbosity: 2
      tags: init

    - name: Print k8s hash
      ansible.builtin.debug:
        msg: "[Manager] K8S_TOKEN_HOLDER K8S Hash is  {{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}"
        verbosity: 2
      tags: init

    - name: Print k8s ansible_default_ipv4.address
      ansible.builtin.debug:
        msg: "[Manager] K8S_MANAGER_IP is  {{ ansible_default_ipv4.address }}"
        verbosity: 2
      tags: init

    - name: Get K8s secrets
      ansible.builtin.command: kubectl get secrets
      changed_when: false
      register: k8s_secret
      when: hostvars['127.0.0.1']['docker_username'] and hostvars['127.0.0.1']['docker_password']

    - name: Create docker secret
      ansible.builtin.command: kubectl create secret docker-registry dockerregcred --docker-username={{ hostvars['127.0.0.1']['docker_username'] }} \
        --docker-password={{ hostvars['127.0.0.1']['docker_password'] }}
      when:
        - hostvars['127.0.0.1']['docker_username'] and hostvars['127.0.0.1']['docker_password']
        - "'dockerregcred' not in k8s_secret.stdout"
      no_log: true
      
    - name: Add docker secret to default service account
      ansible.builtin.shell: >
        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "dockerregcred"}]}'
      register: patch_service_account
      when: hostvars['127.0.0.1']['docker_username'] and hostvars['127.0.0.1']['docker_password']
      until: patch_service_account is not failed
      retries: 10
      tags: install

    - name: Create yaml repo for setup
      ansible.builtin.file:
        path: "{{ yaml_repo_dir_path }}"
        state: directory
        mode: "{{ yaml_repo_dir_mode }}"
      tags: init

    - name: Delete Calico yaml file if exists
      ansible.builtin.file:
        path: "{{ calico_yml_file_path }}"
        state: absent
      when: hostvars['127.0.0.1']['k8s_cni'] == "calico"
      tags: init

    - name: Copy Calico yaml file
      ansible.builtin.copy:
        src: kube-calico.yaml
        dest: "{{ calico_yml_file_path }}"
        owner: root
        group: root
        mode: "{{ calico_yml_file_mode }}"
      when: hostvars['127.0.0.1']['k8s_cni'] == "calico"
      tags: init

    - name: Edge / Workstation Install allows pods to scheudle on manager
      ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      failed_when: false
      tags: init

    - name: Setup Calico SDN network
      ansible.builtin.command: "kubectl apply -f '{{ calico_manifest_url }}'"
      when: hostvars['127.0.0.1']['k8s_cni'] == "calico"
      failed_when: false
      tags: init


    - name: Delete Flannel yaml file if exists
      ansible.builtin.file:
        path: "{{ flannel_yml_file_path }}"
        state: absent
      when: hostvars['127.0.0.1']['k8s_cni'] == "flannel"
      tags: init

    - name: Copy Flannel yaml file
      ansible.builtin.copy:
        src: kube-flannel.yaml
        dest: "{{ flannel_yml_file_path }}"
        owner: root
        group: root
        mode: "{{ flannel_yml_file_mode }}"
      when: hostvars['127.0.0.1']['k8s_cni'] == "flannel"
      tags: init

    - name: Replace flannel network cidr
      ansible.builtin.replace:
        path: "{{ flannel_yml_file_path }}"
        regexp: "10.244.0.0/16"
        replace: "{{ hostvars['127.0.0.1']['k8s_pod_network_cidr'] }}"
      when: hostvars['127.0.0.1']['k8s_cni'] == "flannel"
      tags: init

    - name: Setup Flannel SDN network
      ansible.builtin.command: "kubectl apply -f '{{ flannel_manifest_url }}'"
      when: hostvars['127.0.0.1']['k8s_cni'] == "flannel"
      tags: init

    - name: Create service account (K8s dashboard) files
      ansible.builtin.copy:
        src: create_admin_user.yaml
        dest: "{{ k8s_service_account_file_dest }}"
        owner: root
        group: root
        mode: "{{ k8s_service_account_file_mode }}"
      tags: init

    - name: Check K8s service accounts status
      ansible.builtin.command: "kubectl get serviceaccounts"
      changed_when: false
      register: k8s_service_accounts
      tags: init

    - name: Create service account (K8s dashboard)
      ansible.builtin.command: "kubectl create -f '{{ k8s_service_account_file_dest }}'"
      changed_when: true
      when: "'default' not in k8s_service_accounts.stdout"
      tags: init

    - name: Create clusterRoleBinding (K8s dashboard) files
      ansible.builtin.copy:
        src: create_clusterRoleBinding.yaml
        dest: "{{ cluster_role_binding_file_dest }}"
        owner: root
        group: root
        mode: "{{ cluster_role_binding_file_mode }}"
      tags: init

    - name: Create clusterRoleBinding (K8s dashboard)
      ansible.builtin.command: "kubectl create -f '{{ cluster_role_binding_file_dest }}'"
      changed_when: true
      failed_when: false
      tags: init

    - name: Dump bearer token for K8s dashboard login
      ansible.builtin.shell: >
        set -o pipefail && \
          kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') > /root/k8s/token
      changed_when: true
      tags: init

    - name: Edge / Workstation Install allows pods to scheudle on manager
      ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      when: groups['manager'][0] == groups['compute'][0] and groups['compute']|length == 1
      failed_when: false
      tags: init
